@page "/blocks"

<!-- TODO: Add using and inject statements -->

<h3>Blocks</h3>
<button @onclick="MineBlock" >Mine Block</button>
@if (blocklist == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="card-columns">

    <!-- TODO: Add cards for each block in the block list

               Each card should show:
                    - the position in the chain (starting at 0)
                    - the hash
                    - the nonce
                    - the previous hash
      -->
    @foreach (var item in blocklist)
    {
        <div class="card" style="width: 18rem;">
            <ul class="list-group list-group-flush">
                <li class="list-group-item">Index :@item.Index</li>
                <li class="list-group-item">Hash :@item.Hash</li>
                <li class="list-group-item">Nounce :@item.Nounce</li>
                <li class="list-group-item">PreviousBlock :@item.PreviousBlock</li>

            </ul>
        </div>
    }

</div>
}

@code {
    IEnumerable<BlockSummary> blocklist;
    [Inject]
    public BlockService BlockService { get; set; }
    [Inject]
    public MiningService MiningService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadBlock();
    }
    async Task MineBlock()
    {
        var block= await MiningService.MineBlock();
        await BlockService.SummitNewBlockAsync(block);
        await LoadBlock();

    }
    async Task LoadBlock()
    {
        blocklist = await BlockService.GetBlocks();
    }
}
